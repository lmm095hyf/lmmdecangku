当今的操作系统绝大部分都是基于多任务的操作系统；
多任务操作系统的最大特点，是可以同时运行多个程序；
由于操作系统支持时间片轮换算法，使得用户感觉多个程序在同时运行，似乎有多个CPU在起作用。
Windows是一个多进程多线程的系统. 

多线程优点
在基于线程的多任务而处理环境中，线程是执行特定任务的可执行代码的最小单位；
多线程帮助你写出CPU最大利用率的高效程序，因为空闲时间保持最低，这对Java运行的交互式的网络互连环境是至关重要的，例如：网络的数据传输速率远低于计算机的处理能力，在传统的单线程环境中，你的计算机必须花费大量的空闲时间来等待，多线程能够使你充分利用这些空闲时间。

Java支持编写多线程的程序；
多线程最大的好处在于可以同时并发执行多个任务，当程序的某个功能部分正在等待某些资源的时候，此时又不愿意因为等待而造成程序暂停，那么就可以创建另外的线程进行其它的工作；
多线程可以最大限度地减低CPU的闲置时间，从而提高CPU的利用率；


final void setPriority(int newPriority)
设置线程的优先级: 取值:1~10, 5 是默认值
 
后台线程是指为其它线程提供服务的线程，也称为守护线程或精灵线程；
Java虚拟机的垃圾回收线程是典型的后台线程，它负责回收其它线程不再使用的内存；
后台线程的特点是：后台线程与前台线程相伴相随，只有所有的前台线程都结束生命周期，后台线程才会结束生命周期。

线程实现方式:
1. 继承 Thread 类 ==> 重写 run 方法
2. 实现 Runnable 接口 ==>  必须借助 Thread 对象, 实现线程

run() start() 区别:
run(): 执行业务, 同步方式执行
start(): 启动线程执行run方法

属性:   id, name, state (状态), priority (1~10 默认 5)

方法:   yield, join, sleep, start...


TCP:transmission control protocol: 可靠的，端到端的字节流通信协议。是一种面向连接的协议。
UDP： user data protocol: UDP提供了一种发送封装的原始IP数据报的方法，并且发送时无需建立连接，是一种不可靠的连接.


TCP工作原理: 它将消息分解成数据包并在接收端以正确的顺序再重新装配起来。它还处理地遗失数据包的重传请求。三次握手的原理
     TCP建立联接时的三次握手:
		第一次握手：建立连接时，客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认； 		第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态； 		第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。 		完成三次握手，客户端与服务器开始传送数据。。。。。
UDP不提供装配和重传请求。它只向前传送信息包。
区别: TCP是面向连接的，UDP是面向非联接的. 